package common

import (

	"fmt"

	"github.com/ethereum/go-ethereum/swarm/api"
	"github.com/ethereum/go-ethereum/swarmdb/common"
	//"github.com/ethereum/go-ethereum/swarmdb/tree"

	"math/rand"
	"testing"
)

/*
func rng() *mathutil.FC32 {
	x, err := mathutil.NewFC32(math.MinInt32/4, math.MaxInt32/4, false)
	if err != nil {
		panic(err)
	}
	return x
}
*/

func getAPI() (a *api.Api) {
	return api.NewApi(nil, nil)
}

func makeTree() (hashid []byte, keytype common.KeyType) {

	hashid = make([]byte, 32)

	// write 20 int keys into B-tree (only kept in memory)
	keytype = common.KT_INTEGER
	bpt := swarmdb.NewBPlusTreeDB(getAPI(), hashid, keytype)
	bpt.StartBuffer()
	vals := rand.Perm(20)
	for _, i := range vals {

		k := common.IntToByte(i)
		v := []byte(fmt.Sprintf("valueof%06x", i))
		// fmt.Printf("Insert %d %v %v\n", i, string(k), string(v))
		bpt.Put(k, v)

	}

	// flush B+tree in memory to SWARM
	bpt.FlushBuffer()

	// r.Print()
	return hashid, keytype
}

func TestEqual(t *testing.T) {
	hashid, keytype := makeTree()
	bptree := swarmdb.NewBPlusTreeDB(getAPI(), hashid, keytype)

	key := 4
	expected := "valueof000004"
	fmt.Printf("Equal test: %v\n", key)

	actual, found, err := bptree.Equal(key) //////////
	if err != nil {
		t.Fatal(err)
	}
	if !found {
		t.Fatalf("key %s not found!", key)
	}
	if actual != expected {
		t.Fatal("wrong value %s found. should be %s\n", actual, expected)
	}

}

func TestGreaterThan(t *testing.T) {
	hashid, keytype := makeTree()
	bptree := swarmdb.NewBPlusTreeDB(getAPI(), hashid, keytype)

	key := 11
	expected := []string{
		"valueof00000c",
		"valueof00000d",
		"valueof00000e",
		"valueof00000f",
		"valueof000010",
		"valueof000011",
		"valueof000012",
		"valueof000013",
	}
	fmt.Printf("GreaterThan test: %v\n", key)

	actuals, err := bptree.GreaterThan(key) ///////////
	if err != nil {
		t.Fatal(err)
	}
	if len(actuals) == 0 {
		t.Fatalf("found none for > %s", key)
	}
	for i, actual := range actuals {
		if expected[i] != actual {
			t.Fatal("wrong values found. expected: %v, actual %v\n", expected, actuals)
		}
	}

}

func TestGreaterThanOrEqualTo(t *testing.T) {
}

func TestLessThan(t *testing.T) {
}

func TestLessThanOrEqualTo(t *testing.T) {
}

func TestNotEqual(t *testing.T) {
}

//AND
//OR

//test big file of queries - or should do this from client side?
func TestSuite(t *testing.T) {
}
