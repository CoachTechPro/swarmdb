var net = require('net');
var Web3 = require('web3');

function Connection(options) {
    var client = new net.Socket();
    this.client = client.connect(options.port, options.host, function() {  
        console.log('CONNECTED TO: ' + options.host + ':' + options.port);
        
    });
    this.buffer = [];
    this.waiting_for_response = false;
    var that = this;
    this.client.on('data', function(data) {
        that.waiting_for_response = false;
        var pair = that.buffer.shift();
        var handler = pair[0];
        process.nextTick(function() {
            handler(data);
        });
        that.flush();
    });
};
Connection.prototype = {
    _print: function(data) {
        console.log(data.toString());
    },
    request: function(msg, handler) {
        this.buffer.push([handler, msg]);
        this.flush();
    },
    flush: function() {
        var pair = this.buffer[0];
        if (pair && !this.waiting_for_response) {
            this.client.write(pair[1]);
            this.waiting_for_response = true;
        }
    },
    openTable: function(table) {
        var msg = JSON.stringify({
            "requesttype": "OpenTable",
            "owner": "0xf6b55acbbc49f4524aa48d19281a9a77c54de10f",
            "table": table,
            "columns": null
        }) + "\n";
        this.request(msg, this._print);
    },
    get: function(table, key) {
        var msg = JSON.stringify({
            "requesttype": "Get",
            "owner": "0xf6b55acbbc49f4524aa48d19281a9a77c54de10f",
            "table": table,
            "key": key,
            "columns": null
        }) + "\n";
        this.request(msg, this._print);
    }
};


exports.createConnection = function createConnection(config) {
    return new Connection(config);
};